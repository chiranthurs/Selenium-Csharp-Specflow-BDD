//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace BAF
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "14.00")]
	public class QPTPageUI : AppModelBase
	{
		#region Constructors

		public QPTPageUI()
		{
			Name = @"QPTPageUI";
			QptExplorerWindow = new QptExplorerWindowNode(this);
			WpfWindow = new WpfWindowNode(this);
			QPTErrorWindow = new QPTErrorWindowNode(this);
			NewQuantificationWindow = new NewQuantificationWindowNode(this);
			Eyes4PackEyeShadows4PackEyeShadowsWindow = new Eyes4PackEyeShadows4PackEyeShadowsWindowNode(this);
			NewFolderWindow = new NewFolderWindowNode(this);
			EditFolderWindow = new EditFolderWindowNode(this);
			RebuildDescriptions();
			
		}

		public QPTPageUI(ITestObject contextTestObject)
		{
			Name = @"QPTPageUI";
			QptExplorerWindow = new QptExplorerWindowNode(contextTestObject, this);
			WpfWindow = new WpfWindowNode(contextTestObject, this);
			QPTErrorWindow = new QPTErrorWindowNode(contextTestObject, this);
			NewQuantificationWindow = new NewQuantificationWindowNode(contextTestObject, this);
			Eyes4PackEyeShadows4PackEyeShadowsWindow = new Eyes4PackEyeShadows4PackEyeShadowsWindowNode(contextTestObject, this);
			NewFolderWindow = new NewFolderWindowNode(contextTestObject, this);
			EditFolderWindow = new EditFolderWindowNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public QptExplorerWindowNode QptExplorerWindow { get; private set; }
		public WpfWindowNode WpfWindow { get; private set; }
		public QPTErrorWindowNode QPTErrorWindow { get; private set; }
		public NewQuantificationWindowNode NewQuantificationWindow { get; private set; }
		public Eyes4PackEyeShadows4PackEyeShadowsWindowNode Eyes4PackEyeShadows4PackEyeShadowsWindow { get; private set; }
		public NewFolderWindowNode NewFolderWindow { get; private set; }
		public EditFolderWindowNode EditFolderWindow { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class QptExplorerWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public QptExplorerWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				StoreRadioButton = new StoreRadioButtonNode(this, applicationModel);
				OnlineRadioButton = new OnlineRadioButtonNode(this, applicationModel);
				AllRadioButton = new AllRadioButtonNode(this, applicationModel);
				FileButton = new FileButtonNode(this, applicationModel);
				TreeView = new TreeViewNode(this, applicationModel);
				closeQPTwindow = new closeQPTwindowNode(this, applicationModel);
				NewButton = new NewButtonNode(this, applicationModel);
				ScrollViewerUiObject = new ScrollViewerUiObjectNode(this, applicationModel);
				FolderUiObject = new FolderUiObjectNode(this, applicationModel);
				CommonUiObject = new CommonUiObjectNode(this, applicationModel);
				FilterUiObject = new FilterUiObjectNode(this, applicationModel);
				QuantificationUiObject = new QuantificationUiObjectNode(this, applicationModel);
				WpfObjectUiObject = new WpfObjectUiObjectNode(this, applicationModel);
				WpfObjectUiObject1 = new WpfObjectUiObject1Node(this, applicationModel);
				NewFolder = new NewFolderNode(this, applicationModel);
				NewUiObject = new NewUiObjectNode(this, applicationModel);
				EditButton = new EditButtonNode(this, applicationModel);
				EditFolder = new EditFolderNode(this, applicationModel);
				FolderUiObject1 = new FolderUiObject1Node(this, applicationModel);
				WpfObjectUiObject2 = new WpfObjectUiObject2Node(this, applicationModel);
				DeleteButton = new DeleteButtonNode(this, applicationModel);
				DeleteUiObject = new DeleteUiObjectNode(this, applicationModel);
				CommonUiObject1 = new CommonUiObject1Node(this, applicationModel);
				WpfObjectUiObject3 = new WpfObjectUiObject3Node(this, applicationModel);
				StoreUiObject = new StoreUiObjectNode(this, applicationModel);
				OnlineUiObject = new OnlineUiObjectNode(this, applicationModel);
				AllUiObject = new AllUiObjectNode(this, applicationModel);
				FilterUiObject1 = new FilterUiObject1Node(this, applicationModel);
				WpfObjectUiObject4 = new WpfObjectUiObject4Node(this, applicationModel);
				WpfObjectUiObject5 = new WpfObjectUiObject5Node(this, applicationModel);
				WpfObjectUiObject6 = new WpfObjectUiObject6Node(this, applicationModel);
				WpfObjectUiObject7 = new WpfObjectUiObject7Node(this, applicationModel);
				WpfObjectUiObject8 = new WpfObjectUiObject8Node(this, applicationModel);
				NewMenu = new NewMenuNode(this, applicationModel);
				NewUiObject1 = new NewUiObject1Node(this, applicationModel);
				OpenButton = new OpenButtonNode(this, applicationModel);
				OpenUiObject = new OpenUiObjectNode(this, applicationModel);
				DuplicateButton = new DuplicateButtonNode(this, applicationModel);
				DuplicateUiObject = new DuplicateUiObjectNode(this, applicationModel);
				RenameButton = new RenameButtonNode(this, applicationModel);
				RenameUiObject = new RenameUiObjectNode(this, applicationModel);
				NoteButton = new NoteButtonNode(this, applicationModel);
				NoteUiObject = new NoteUiObjectNode(this, applicationModel);
				QuantificationUiObject1 = new QuantificationUiObject1Node(this, applicationModel);
				DisplayName = @"Qpt Explorer";
			}
		
			public QptExplorerWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				StoreRadioButton = new StoreRadioButtonNode(this, applicationModel);
				OnlineRadioButton = new OnlineRadioButtonNode(this, applicationModel);
				AllRadioButton = new AllRadioButtonNode(this, applicationModel);
				FileButton = new FileButtonNode(this, applicationModel);
				TreeView = new TreeViewNode(this, applicationModel);
				closeQPTwindow = new closeQPTwindowNode(this, applicationModel);
				NewButton = new NewButtonNode(this, applicationModel);
				ScrollViewerUiObject = new ScrollViewerUiObjectNode(this, applicationModel);
				FolderUiObject = new FolderUiObjectNode(this, applicationModel);
				CommonUiObject = new CommonUiObjectNode(this, applicationModel);
				FilterUiObject = new FilterUiObjectNode(this, applicationModel);
				QuantificationUiObject = new QuantificationUiObjectNode(this, applicationModel);
				WpfObjectUiObject = new WpfObjectUiObjectNode(this, applicationModel);
				WpfObjectUiObject1 = new WpfObjectUiObject1Node(this, applicationModel);
				NewFolder = new NewFolderNode(this, applicationModel);
				NewUiObject = new NewUiObjectNode(this, applicationModel);
				EditButton = new EditButtonNode(this, applicationModel);
				EditFolder = new EditFolderNode(this, applicationModel);
				FolderUiObject1 = new FolderUiObject1Node(this, applicationModel);
				WpfObjectUiObject2 = new WpfObjectUiObject2Node(this, applicationModel);
				DeleteButton = new DeleteButtonNode(this, applicationModel);
				DeleteUiObject = new DeleteUiObjectNode(this, applicationModel);
				CommonUiObject1 = new CommonUiObject1Node(this, applicationModel);
				WpfObjectUiObject3 = new WpfObjectUiObject3Node(this, applicationModel);
				StoreUiObject = new StoreUiObjectNode(this, applicationModel);
				OnlineUiObject = new OnlineUiObjectNode(this, applicationModel);
				AllUiObject = new AllUiObjectNode(this, applicationModel);
				FilterUiObject1 = new FilterUiObject1Node(this, applicationModel);
				WpfObjectUiObject4 = new WpfObjectUiObject4Node(this, applicationModel);
				WpfObjectUiObject5 = new WpfObjectUiObject5Node(this, applicationModel);
				WpfObjectUiObject6 = new WpfObjectUiObject6Node(this, applicationModel);
				WpfObjectUiObject7 = new WpfObjectUiObject7Node(this, applicationModel);
				WpfObjectUiObject8 = new WpfObjectUiObject8Node(this, applicationModel);
				NewMenu = new NewMenuNode(this, applicationModel);
				NewUiObject1 = new NewUiObject1Node(this, applicationModel);
				OpenButton = new OpenButtonNode(this, applicationModel);
				OpenUiObject = new OpenUiObjectNode(this, applicationModel);
				DuplicateButton = new DuplicateButtonNode(this, applicationModel);
				DuplicateUiObject = new DuplicateUiObjectNode(this, applicationModel);
				RenameButton = new RenameButtonNode(this, applicationModel);
				RenameUiObject = new RenameUiObjectNode(this, applicationModel);
				NoteButton = new NoteButtonNode(this, applicationModel);
				NoteUiObject = new NoteUiObjectNode(this, applicationModel);
				QuantificationUiObject1 = new QuantificationUiObject1Node(this, applicationModel);
				DisplayName = @"Qpt Explorer";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"Window",
					FullType = @"window",
					WindowTitleRegExp = @"Qpt Explorer"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public StoreRadioButtonNode StoreRadioButton { get; private set; }
			public OnlineRadioButtonNode OnlineRadioButton { get; private set; }
			public AllRadioButtonNode AllRadioButton { get; private set; }
			public FileButtonNode FileButton { get; private set; }
			public TreeViewNode TreeView { get; private set; }
			public closeQPTwindowNode closeQPTwindow { get; private set; }
			public NewButtonNode NewButton { get; private set; }
			public ScrollViewerUiObjectNode ScrollViewerUiObject { get; private set; }
			public FolderUiObjectNode FolderUiObject { get; private set; }
			public CommonUiObjectNode CommonUiObject { get; private set; }
			public FilterUiObjectNode FilterUiObject { get; private set; }
			public QuantificationUiObjectNode QuantificationUiObject { get; private set; }
			public WpfObjectUiObjectNode WpfObjectUiObject { get; private set; }
			public WpfObjectUiObject1Node WpfObjectUiObject1 { get; private set; }
			public NewFolderNode NewFolder { get; private set; }
			public NewUiObjectNode NewUiObject { get; private set; }
			public EditButtonNode EditButton { get; private set; }
			public EditFolderNode EditFolder { get; private set; }
			public FolderUiObject1Node FolderUiObject1 { get; private set; }
			public WpfObjectUiObject2Node WpfObjectUiObject2 { get; private set; }
			public DeleteButtonNode DeleteButton { get; private set; }
			public DeleteUiObjectNode DeleteUiObject { get; private set; }
			public CommonUiObject1Node CommonUiObject1 { get; private set; }
			public WpfObjectUiObject3Node WpfObjectUiObject3 { get; private set; }
			public StoreUiObjectNode StoreUiObject { get; private set; }
			public OnlineUiObjectNode OnlineUiObject { get; private set; }
			public AllUiObjectNode AllUiObject { get; private set; }
			public FilterUiObject1Node FilterUiObject1 { get; private set; }
			public WpfObjectUiObject4Node WpfObjectUiObject4 { get; private set; }
			public WpfObjectUiObject5Node WpfObjectUiObject5 { get; private set; }
			public WpfObjectUiObject6Node WpfObjectUiObject6 { get; private set; }
			public WpfObjectUiObject7Node WpfObjectUiObject7 { get; private set; }
			public WpfObjectUiObject8Node WpfObjectUiObject8 { get; private set; }
			public NewMenuNode NewMenu { get; private set; }
			public NewUiObject1Node NewUiObject1 { get; private set; }
			public OpenButtonNode OpenButton { get; private set; }
			public OpenUiObjectNode OpenUiObject { get; private set; }
			public DuplicateButtonNode DuplicateButton { get; private set; }
			public DuplicateUiObjectNode DuplicateUiObject { get; private set; }
			public RenameButtonNode RenameButton { get; private set; }
			public RenameUiObjectNode RenameUiObject { get; private set; }
			public NoteButtonNode NoteButton { get; private set; }
			public NoteUiObjectNode NoteUiObject { get; private set; }
			public QuantificationUiObject1Node QuantificationUiObject1 { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class StoreRadioButtonNode : RadioButtonNodeBase
			{
				#region Constructors
			
				public StoreRadioButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Store";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.RadioButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.RadioButtonDescription
					{
						Text = @"Store",
						ObjectName = @"Store"
					};
				}
			
				#endregion
			
			}

			public sealed class OnlineRadioButtonNode : RadioButtonNodeBase
			{
				#region Constructors
			
				public OnlineRadioButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Online";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.RadioButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.RadioButtonDescription
					{
						Text = @"Online",
						ObjectName = @"Online"
					};
				}
			
				#endregion
			
			}

			public sealed class AllRadioButtonNode : RadioButtonNodeBase
			{
				#region Constructors
			
				public AllRadioButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"All";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.RadioButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.RadioButtonDescription
					{
						Text = @"All",
						ObjectName = @"All"
					};
				}
			
				#endregion
			
			}

			public sealed class FileButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public FileButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"File";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"File",
						ObjectName = @"PART_ToggleButton"
					};
				}
			
				#endregion
			
			}

			public sealed class TreeViewNode : TreeViewNodeBase
			{
				#region Constructors
			
				public TreeViewNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"_treeView";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.TreeViewDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.TreeViewDescription
					{
						ObjectName = @"_treeView"
					};
				}
			
				#endregion
			
			}

			public sealed class closeQPTwindowNode : ButtonNodeBase
			{
				#region Constructors
			
				public closeQPTwindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"closeQPTwindow";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						ParentText = string.Empty,
						Text = string.Empty,
						ObjectName = string.Empty,
						FullNamePath = @";Window;",
						FullType = @"button",
						WindowTitleRegExp = @"Qpt Explorer",
						Index = 1
					};
				}
			
				#endregion
			
			}

			public sealed class NewButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public NewButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"New";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"New",
						ObjectName = @"PART_ToggleButton"
					};
				}
			
				#endregion
			
			}

			public sealed class ScrollViewerUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public ScrollViewerUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"ScrollViewer";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"ScrollViewer",
						FullNamePath = @"ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						WindowTitleRegExp = @"Qpt Explorer"
					};
				}
			
				#endregion
			
			}

			public sealed class FolderUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public FolderUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Folder";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"HomeGroup"
					};
				}
			
				#endregion
			
			}

			public sealed class CommonUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public CommonUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Common";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"Common",
						FullNamePath = @"Common;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class FilterUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public FilterUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Filter";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"Filter",
						FullNamePath = @"Filter;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class QuantificationUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public QuantificationUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Quantification";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"QuantificationGroup"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";HomeGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 0
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject1Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";HomeGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 1
					};
				}
			
				#endregion
			
			}

			public sealed class NewFolderNode : ButtonNodeBase
			{
				#region Constructors
			
				public NewFolderNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"New1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"New",
						ObjectName = @"New",
						FullType = @"button"
					};
				}
			
				#endregion
			
			}

			public sealed class NewUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public NewUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"New";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;New;;HomeGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class EditButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public EditButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Edit";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Edit",
						ObjectName = @"Edit"
					};
				}
			
				#endregion
			
			}

			public sealed class EditFolderNode : UiObjectNodeBase
			{
				#region Constructors
			
				public EditFolderNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Edit";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Edit;;HomeGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class FolderUiObject1Node : UiObjectNodeBase
			{
				#region Constructors
			
				public FolderUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Folder1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"Folder"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject2Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject2Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject2";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";Common;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class DeleteButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public DeleteButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Delete";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Delete",
						ObjectName = @"Delete"
					};
				}
			
				#endregion
			
			}

			public sealed class DeleteUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public DeleteUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Delete";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Delete;;Common;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class CommonUiObject1Node : UiObjectNodeBase
			{
				#region Constructors
			
				public CommonUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Common1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"Common",
						FullNamePath = @"Common;Common;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject3Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject3Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject3";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";Filter;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class StoreUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public StoreUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Store";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Store;;Filter;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class OnlineUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public OnlineUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Online";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Online;;Filter;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class AllUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public AllUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"All";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;All;;Filter;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class FilterUiObject1Node : UiObjectNodeBase
			{
				#region Constructors
			
				public FilterUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Filter1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"Filter",
						FullNamePath = @"Filter;Filter;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject4Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject4Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject4";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 0
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject5Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject5Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject5";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 1
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject6Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject6Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject6";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 2
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject7Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject7Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject7";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 3
					};
				}
			
				#endregion
			
			}

			public sealed class WpfObjectUiObject8Node : UiObjectNodeBase
			{
				#region Constructors
			
				public WpfObjectUiObject8Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfObject8";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = string.Empty,
						FullNamePath = @";QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object",
						Index = 4
					};
				}
			
				#endregion
			
			}

			public sealed class NewMenuNode : MenuNodeBase
			{
				#region Constructors
			
				public NewMenuNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"New";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.MenuDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.MenuDescription
					{
						NativeClass = @"Microsoft.Windows.Controls.Ribbon.RibbonMenuButton",
						ObjectName = @"New"
					};
				}
			
				#endregion
			
			}

			public sealed class NewUiObject1Node : UiObjectNodeBase
			{
				#region Constructors
			
				public NewUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"New1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;PART_ToggleButton;New;;QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class OpenButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public OpenButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Open";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Open",
						ObjectName = @"Open"
					};
				}
			
				#endregion
			
			}

			public sealed class OpenUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public OpenUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Open";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Open;;QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class DuplicateButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public DuplicateButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Duplicate";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Duplicate",
						ObjectName = @"Duplicate"
					};
				}
			
				#endregion
			
			}

			public sealed class DuplicateUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public DuplicateUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Duplicate";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Duplicate;;QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class RenameButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public RenameButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Rename";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Rename",
						ObjectName = @"Rename"
					};
				}
			
				#endregion
			
			}

			public sealed class RenameUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public RenameUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Rename";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Rename;;QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class NoteButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public NoteButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Note";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Note",
						ObjectName = @"Note"
					};
				}
			
				#endregion
			
			}

			public sealed class NoteUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public NoteUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Note";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						WindowTitleRegExp = @"Qpt Explorer",
						ObjectName = @"TwoLineText",
						FullNamePath = @"TwoLineText;Note;;QuantificationGroup;ScrollViewer;Explorer;Ribbon;Window;",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			public sealed class QuantificationUiObject1Node : UiObjectNodeBase
			{
				#region Constructors
			
				public QuantificationUiObject1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Quantification1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"Quantification",
						FullType = @"object"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class WpfWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public WpfWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				Image = new ImageNode(this, applicationModel);
				ExitUiObject = new ExitUiObjectNode(this, applicationModel);
				StoreOneSeasonQuantificationUiObject = new StoreOneSeasonQuantificationUiObjectNode(this, applicationModel);
				DisplayName = @"WpfWindow";
			}
		
			public WpfWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				Image = new ImageNode(this, applicationModel);
				ExitUiObject = new ExitUiObjectNode(this, applicationModel);
				StoreOneSeasonQuantificationUiObject = new StoreOneSeasonQuantificationUiObjectNode(this, applicationModel);
				DisplayName = @"WpfWindow";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = string.Empty,
					FullType = @"window",
					WindowTitleRegExp = string.Empty
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public ImageNode Image { get; private set; }
			public ExitUiObjectNode ExitUiObject { get; private set; }
			public StoreOneSeasonQuantificationUiObjectNode StoreOneSeasonQuantificationUiObject { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class ImageNode : ImageNodeBase
			{
				#region Constructors
			
				public ImageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Exitbutton";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ImageDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ImageDescription
					{
						ObjectName = @"Image",
						FullNamePath = @"Image;Exit;PART_SubMenuScrollViewer;",
						FullType = @"image"
					};
				}
			
				#endregion
			
			}

			public sealed class ExitUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public ExitUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Exit";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"Exit",
						FullNamePath = @"Exit;Exit;PART_SubMenuScrollViewer;",
						FullType = @"object",
						WindowTitleRegExp = string.Empty
					};
				}
			
				#endregion
			
			}

			public sealed class StoreOneSeasonQuantificationUiObjectNode : UiObjectNodeBase
			{
				#region Constructors
			
				public StoreOneSeasonQuantificationUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Store One Season Quantification";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.UiObjectDescription
					{
						ObjectName = @"Store One Season Quantification",
						FullNamePath = @"Store One Season Quantification;Store One Season Quantification;PART_SubMenuScrollViewer;",
						FullType = @"object",
						WindowTitleRegExp = string.Empty
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class QPTErrorWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public QPTErrorWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				CloseButton = new CloseButtonNode(this, applicationModel);
				DisplayName = @"QPT Error";
			}
		
			public QPTErrorWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				CloseButton = new CloseButtonNode(this, applicationModel);
				DisplayName = @"QPT Error";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"QPT Error",
					FullType = @"window",
					WindowTitleRegExp = @"QPT Error"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public CloseButtonNode CloseButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class CloseButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public CloseButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Close";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Close",
						ObjectName = @"Close"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class NewQuantificationWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public NewQuantificationWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				NameEditField = new NameEditFieldNode(this, applicationModel);
				CreateButton = new CreateButtonNode(this, applicationModel);
				DisplayName = @"New Quantification";
			}
		
			public NewQuantificationWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				NameEditField = new NameEditFieldNode(this, applicationModel);
				CreateButton = new CreateButtonNode(this, applicationModel);
				DisplayName = @"New Quantification";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"New Quantification",
					FullType = @"window",
					WindowTitleRegExp = @"New Quantification"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public NameEditFieldNode NameEditField { get; private set; }
			public CreateButtonNode CreateButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class NameEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public NameEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Name";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = @"_name"
					};
				}
			
				#endregion
			
			}

			public sealed class CreateButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public CreateButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Create";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Create",
						ObjectName = @"Create"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class Eyes4PackEyeShadows4PackEyeShadowsWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public Eyes4PackEyeShadows4PackEyeShadowsWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				SaveButton = new SaveButtonNode(this, applicationModel);
				DisplayName = @"7-2018 / 1111 Eyes / 4-pack Eye shadows / 4-pack Eye shadows";
			}
		
			public Eyes4PackEyeShadows4PackEyeShadowsWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				SaveButton = new SaveButtonNode(this, applicationModel);
				DisplayName = @"7-2018 / 1111 Eyes / 4-pack Eye shadows / 4-pack Eye shadows";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"7-2018 / 1111 Eyes / 4-pack Eye shadows / 4-pack Eye shadows",
					FullType = @"window",
					WindowTitleRegExp = @"7-2018 / 1111 Eyes / 4-pack Eye shadows / 4-pack Eye shadows"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public SaveButtonNode SaveButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class SaveButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SaveButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Save";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Save",
						ObjectName = @"save"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class NewFolderWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public NewFolderWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				NameEditField = new NameEditFieldNode(this, applicationModel);
				WpfEditEditField = new WpfEditEditFieldNode(this, applicationModel);
				SaveButton = new SaveButtonNode(this, applicationModel);
				DisplayName = @"New Folder";
			}
		
			public NewFolderWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				NameEditField = new NameEditFieldNode(this, applicationModel);
				WpfEditEditField = new WpfEditEditFieldNode(this, applicationModel);
				SaveButton = new SaveButtonNode(this, applicationModel);
				DisplayName = @"New Folder";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"New Folder",
					FullType = @"window",
					WindowTitleRegExp = @"New Folder"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public NameEditFieldNode NameEditField { get; private set; }
			public WpfEditEditFieldNode WpfEditEditField { get; private set; }
			public SaveButtonNode SaveButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class NameEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public NameEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"_name";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = @"_name"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfEditEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public WpfEditEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfEdit";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = string.Empty,
						FullType = @"edit"
					};
				}
			
				#endregion
			
			}

			public sealed class SaveButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SaveButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Save";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Save",
						ObjectName = @"Save"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class EditFolderWindowNode : WindowNodeBase
		{
			#region Constructors
		
			public EditFolderWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				NameEditField = new NameEditFieldNode(this, applicationModel);
				WpfEditEditField = new WpfEditEditFieldNode(this, applicationModel);
				SaveButton = new SaveButtonNode(this, applicationModel);
				DisplayName = @"Edit Folder";
			}
		
			public EditFolderWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				NameEditField = new NameEditFieldNode(this, applicationModel);
				WpfEditEditField = new WpfEditEditFieldNode(this, applicationModel);
				SaveButton = new SaveButtonNode(this, applicationModel);
				DisplayName = @"Edit Folder";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.WindowDescription
				{
					ObjectName = @"Edit Folder",
					FullType = @"window",
					WindowTitleRegExp = @"Edit Folder"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public NameEditFieldNode NameEditField { get; private set; }
			public WpfEditEditFieldNode WpfEditEditField { get; private set; }
			public SaveButtonNode SaveButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class NameEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public NameEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"_name";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = @"_name"
					};
				}
			
				#endregion
			
			}

			public sealed class WpfEditEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public WpfEditEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"WpfEdit";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.EditFieldDescription
					{
						ObjectName = string.Empty,
						FullType = @"edit"
					};
				}
			
				#endregion
			
			}

			public sealed class SaveButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SaveButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Save";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.WPF.ButtonDescription
					{
						Text = @"Save",
						ObjectName = @"Save"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IEditField, HP.LFT.SDK.WPF.EditFieldDescription>, HP.LFT.SDK.WPF.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetText(string text)
			{
				 Concrete.SetText(text);
			}
	
			public void Select(int fromCharPos, int toCharPos)
			{
				 Concrete.Select(fromCharPos, toCharPos);
			}
	
			public void Select(int fromLine, int fromCharPos, int toLine, int toCharPos)
			{
				 Concrete.Select(fromLine, fromCharPos, toLine, toCharPos);
			}
	
			public void SetSecure(string encodedText)
			{
				 Concrete.SetSecure(encodedText);
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool IsReadOnly
			{
				get { return Concrete.IsReadOnly; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class ImageNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IImage, HP.LFT.SDK.WPF.ImageDescription>, HP.LFT.SDK.WPF.IImage
		{
			public ImageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class MenuNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IMenu, HP.LFT.SDK.WPF.MenuDescription>, HP.LFT.SDK.WPF.IMenu
		{
			public MenuNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public string BuildMenuPath(params object[] menuPathParts)
			{
				return Concrete.BuildMenuPath(menuPathParts);
			}
	
			public void Select(HP.LFT.SDK.WPF.IMenuItem item)
			{
				 Concrete.Select(item);
			}
	
			public void Select(string menuPath)
			{
				 Concrete.Select(menuPath);
			}
	
			public HP.LFT.SDK.WPF.IMenuItem GetItem(string itemPath)
			{
				return Concrete.GetItem(itemPath);
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class UiObjectNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IUiObject, HP.LFT.SDK.WPF.UiObjectDescription>, HP.LFT.SDK.WPF.IUiObject
		{
			public UiObjectNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		public abstract class TreeViewNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.ITreeView, HP.LFT.SDK.WPF.TreeViewDescription>, HP.LFT.SDK.WPF.ITreeView
		{
			public TreeViewNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Select(HP.LFT.SDK.WPF.ITreeViewNode node)
			{
				 Concrete.Select(node);
			}
	
			public void Select(string node)
			{
				 Concrete.Select(node);
			}
	
			public void Select(int nodeIndex)
			{
				 Concrete.Select(nodeIndex);
			}
	
			public HP.LFT.SDK.WPF.ITreeViewNode GetNode(string nodePath)
			{
				return Concrete.GetNode(nodePath);
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.WPF.ITreeViewNode> VisibleNodes
			{
				get { return Concrete.VisibleNodes; }		
			}
	
			public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.WPF.ITreeViewNode> SelectedNodes
			{
				get { return Concrete.SelectedNodes; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IButton, HP.LFT.SDK.WPF.ButtonDescription>, HP.LFT.SDK.WPF.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string HelpText
			{
				get { return Concrete.HelpText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public HP.LFT.SDK.WPF.IToggleButton ToggleButton
			{
				get { return Concrete.ToggleButton; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class RadioButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IRadioButton, HP.LFT.SDK.WPF.RadioButtonDescription>, HP.LFT.SDK.WPF.IRadioButton
		{
			public RadioButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Set()
			{
				 Concrete.Set();
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool IsChecked
			{
				get { return Concrete.IsChecked; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		public abstract class WindowNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.WPF.IWindow, HP.LFT.SDK.WPF.WindowDescription>, HP.LFT.SDK.WPF.IWindow
		{
			public WindowNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
	
			public WindowNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Activate()
			{
				 Concrete.Activate();
			}
	
			public void Activate(HP.LFT.SDK.MouseButton button)
			{
				 Concrete.Activate(button);
			}
	
			public void Close()
			{
				 Concrete.Close();
			}
	
			public void Maximize()
			{
				 Concrete.Maximize();
			}
	
			public void Minimize()
			{
				 Concrete.Minimize();
			}
	
			public void Move(System.Drawing.Point point)
			{
				 Concrete.Move(point);
			}
	
			public void Move(int x, int y)
			{
				 Concrete.Move(x, y);
			}
	
			public void Resize(System.Drawing.Size size)
			{
				 Concrete.Resize(size);
			}
	
			public void Resize(int width, int height)
			{
				 Concrete.Resize(width, height);
			}
	
			public void Restore()
			{
				 Concrete.Restore();
			}
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public HP.LFT.SDK.WindowState WindowState
			{
				get { return Concrete.WindowState; }		
			}
	
			public bool IsModal
			{
				get { return Concrete.IsModal; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
